name: unittest

on:
  push:
    branches: [master, main]

env:
  # ACT_LOCAL: 'false'
  PUBLISH_COVERAGE: 'true'

jobs: 
  test:
    # Skip check done automatically by GHA (hosted) but not by `act`.
    if: >-
      ${{ !contains(github.event.head_commit.message, '[skip ci]') && 
          !contains(github.event.head_commit.message, '[ci skip]') &&
          !contains(github.event.head_commit.message, '[no ci]') &&
          !contains(github.event.head_commit.message, '[skip actions]') &&
          !contains(github.event.head_commit.message, '[actions skip]')
      }}

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.15"] # ["3.10.15", "3.12.7"]

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Sanity Check on Python Version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements_dev.txt

          # Install local modules for testing
          pip install -e .

      - if: ${{ startsWith(github.event.head_commit.message, 'Emit') }}
        name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - name: Test with pytest
        env:
          # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables
          PYTHONPATH: $GITHUB_WORKSPACE/src
        run: |
          # pytest tests/ --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
          # pytest tests/ --doctest-modules --junitxml=junit/test-results.xml --cov=./ --cov-report=html
          # Targeting specific folders to keep scope tight.
          # pytest tests/test_with_testclient tests/test_with_requests --doctest-modules --junitxml=junit/test-results.xml --cov=./ --cov-report=html
          
          pytest tests/test_with_testclient --doctest-modules --junitxml=junit/test-results.xml --cov=./ --cov-report=html

          # Run server in background and right with requests to localhost
          fastapi run src/app/main.py --port 5000 &
          pytest tests/test_with_requests --doctest-modules --junitxml=junit/test-results.xml --cov=./ --cov-report=html



      # - if: ${{ env.ACT_LOCAL == 'true' }}
      - if: ${{ env.PUBLISH_COVERAGE == 'true' }}
        name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml 
          overwrite: true
          # Use always() to always run this step to publish test results when there are test failures
          # # NOTE: This if conflicts with the conditional at the top
          # if: ${{ always() }}

      # - if: ${{ env.ACT_LOCAL == 'true' }}
      - if: ${{ env.PUBLISH_COVERAGE == 'true' }}
        name: Upload Coverage Artifact2
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: |
            # htmlcov/index.html
            htmlcov/
          # overwrite: true
          compression-level: 0
          # Use always() to always run this step to publish test results when there are test failures
          # NOTE: This if conflicts with the conditional at the top
          # if: ${{ always() }}
      
